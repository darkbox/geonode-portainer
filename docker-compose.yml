# SWARM STACK

x-common-django:
  &default-common-django
  image: geonode/geonode:4.4.1
  env_file:
      - stack.env
  volumes:
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp
  healthcheck:
    test: ["CMD", "curl", "-m", "10", "--fail", "--silent", "--write-out", "HTTP CODE : %{http_code}\n", "--output", "/dev/null", "http://localhost:3080/"]
    interval: 30s
    timeout: 10s
    retries: 3
  deploy:
    replicas: 1
    restart_policy:
      condition: on-failure
    placement:
      constraints:
        - node.role == worker

services:

  django:
    << : *default-common-django
    environment:
      - IS_CELERY=False
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/geonode/uwsgi.ini"
    networks:
      - geonode-network

  celery:
    << : *default-common-django
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "celery-cmd"
    deploy:
      replicas: 2
    networks:
      - geonode-network

  memcached:
    image: memcached:alpine
    env_file:
      - stack.env
    command: memcached ${MEMCACHED_OPTIONS}
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "11211"]
      interval: 30s
      timeout: 30s
      retries: 5
    deploy:
      replicas: 1
    networks:
      - geonode-network

  geonode:
    image: geonode/nginx:1.25.3-latest
    env_file:
      - stack.env
    environment:
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT-3080}:80"
      - "${HTTPS_PORT-3443}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    deploy:
      replicas: 1
    networks:
      - geonode-network

  letsencrypt:
    image: geonode/letsencrypt:2.6.0-latest
    env_file:
      - stack.env
    volumes:
      - nginx-certificates:/geonode-certificates
    deploy:
      replicas: 1
    networks:
      - geonode-network

  geoserver:
    image: geonode/geoserver:2.24.3-latest
    env_file:
      - stack.env
    ports:
      - "${GEOSERVER_LB_PORT:-8088}:8080"
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp
    healthcheck:
      test: ["CMD", "curl", "-m", "10", "--fail", "--silent", "--write-out", "HTTP CODE : %{http_code}\n", "--output", "/dev/null", "http://localhost:8080/geoserver/ows"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      replicas: 1
    networks:
      - geonode-network

  data-dir-conf:
    image: geonode/geoserver_data:2.24.3-latest
    entrypoint: sleep infinity
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    deploy:
      replicas: 1
    networks:
      - geonode-network

  db:
    image: geonode/postgis:15.3-latest
    command: postgres -c "max_connections=200"
    env_file:
      - stack.env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - geonode-network

  rabbitmq:
    image: rabbitmq:3-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    deploy:
      replicas: 1
    networks:
      - geonode-network

networks:
  geonode-network:
    driver: overlay

volumes:
  statics:
    driver: local
  nginx-confd:
    driver: local
  nginx-certificates:
    driver: local
  geoserver-data-dir:
    driver: local
  dbdata:
    driver: local
  dbbackups:
    driver: local
  backup-restore:
    driver: local
  data:
    driver: local
  tmp:
    driver: local
  rabbitmq:
    driver: local
